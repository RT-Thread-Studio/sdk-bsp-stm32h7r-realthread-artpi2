/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef E_BIKESCREENVIEWBASE_HPP
#define E_BIKESCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/e_bikescreen_screen/E_BikeScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/graph/GraphScroll.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/canvas/PainterARGB8888.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterARGB8888Bitmap.hpp>
#include <touchgfx/widgets/TextureMapper.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/RadioButton.hpp>
#include <touchgfx/widgets/RadioButtonGroup.hpp>
#include <touchgfx/widgets/AnimationTextureMapper.hpp>
#include <gui/containers/MCULoadPercentage_E_Bike.hpp>
#include <gui/containers/FrameRate_E_Bike.hpp>

class E_BikeScreenViewBase : public touchgfx::View<E_BikeScreenPresenter>
{
public:
    E_BikeScreenViewBase();
    virtual ~E_BikeScreenViewBase();
    virtual void setupScreen();

    /*
     * Custom Actions
     */
    virtual void goToMain()
    {
        // Override and implement this function in Screen1
    }
    

    /*
     * Virtual Action Handlers
     */
    virtual void selectMiles()
    {
        // Override and implement this function in E_BikeScreen
    }
    virtual void selectKmh()
    {
        // Override and implement this function in E_BikeScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image background;
    touchgfx::TextArea FPSLableText;
    touchgfx::Image speedometerBackgroundMPH;
    touchgfx::GraphScroll<100> graph;
    touchgfx::GraphElementLine graphLine1;
    touchgfx::PainterARGB8888 graphLine1Painter;
    touchgfx::TextAreaWithOneWildcard currentVelocity;
    touchgfx::TextAreaWithOneWildcard totalDistance;
    touchgfx::TextAreaWithOneWildcard remaining;
    touchgfx::TextArea remainingLabel;
    touchgfx::TextAreaWithOneWildcard elevationLabel;
    touchgfx::Circle highlightMph;
    touchgfx::PainterARGB8888Bitmap highlightMphPainter;
    touchgfx::Circle highlightKmh;
    touchgfx::PainterARGB8888Bitmap highlightKmhPainter;
    touchgfx::TextureMapper needle;
    touchgfx::Button velocityMiles;
    touchgfx::Button velocityKmh;
    touchgfx::TextArea totalDistanceKm;
    touchgfx::TextArea totalDistanceMi;
    touchgfx::Image battery6;
    touchgfx::Image battery5;
    touchgfx::Image battery4;
    touchgfx::Image battery3;
    touchgfx::Image battery2;
    touchgfx::Image battery1;
    touchgfx::RadioButtonGroup<4> modeGroup;
    touchgfx::RadioButton modeOff;
    touchgfx::RadioButton modeStandard;
    touchgfx::RadioButton modeSport;
    touchgfx::RadioButton modeMax;
    touchgfx::Button backButton;
    touchgfx::TextArea directionLabelText;
    touchgfx::TextAreaWithOneWildcard rotationDegreeText;
    touchgfx::TextAreaWithOneWildcard rotationDirectionText;
    touchgfx::TextArea navigationLabelText;
    touchgfx::AnimationTextureMapper compass;
    touchgfx::Image compassNeedle;
    touchgfx::TextArea MCULoadLableText;
    MCULoadPercentage_E_Bike mcuLoadPercentage;
    FrameRate_E_Bike frameRate;
    touchgfx::Image graphOverlay;

    /*
     * Wildcard Buffers
     */
    static const uint16_t CURRENTVELOCITY_SIZE = 3;
    touchgfx::Unicode::UnicodeChar currentVelocityBuffer[CURRENTVELOCITY_SIZE];
    static const uint16_t TOTALDISTANCE_SIZE = 6;
    touchgfx::Unicode::UnicodeChar totalDistanceBuffer[TOTALDISTANCE_SIZE];
    static const uint16_t REMAINING_SIZE = 6;
    touchgfx::Unicode::UnicodeChar remainingBuffer[REMAINING_SIZE];
    static const uint16_t ELEVATIONLABEL_SIZE = 7;
    touchgfx::Unicode::UnicodeChar elevationLabelBuffer[ELEVATIONLABEL_SIZE];
    static const uint16_t ROTATIONDEGREETEXT_SIZE = 4;
    touchgfx::Unicode::UnicodeChar rotationDegreeTextBuffer[ROTATIONDEGREETEXT_SIZE];
    static const uint16_t ROTATIONDIRECTIONTEXT_SIZE = 3;
    touchgfx::Unicode::UnicodeChar rotationDirectionTextBuffer[ROTATIONDIRECTIONTEXT_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<E_BikeScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // E_BIKESCREENVIEWBASE_HPP

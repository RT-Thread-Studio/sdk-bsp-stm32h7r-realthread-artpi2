/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SVGVIEWBASE_HPP
#define SVGVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/svg_screen/SVGPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <gui/containers/MCULoadPercentage_SVG.hpp>
#include <gui/containers/FrameRate_SVG.hpp>
#include <touchgfx/widgets/SVGImage.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>
#include <gui/containers/WaffleMenuContainer.hpp>
#include <touchgfx/containers/scrollers/ScrollWheel.hpp>
#include <gui/containers/IceScoopItemContainer_SVG.hpp>

class SVGViewBase : public touchgfx::View<SVGPresenter>
{
public:
    SVGViewBase();
    virtual ~SVGViewBase();
    virtual void setupScreen();

    virtual void iceScoopScrollWheelUpdateItem(IceScoopItemContainer_SVG& item, int16_t itemIndex)
    {
        // Override and implement this function in SVG
    }
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void changeTheMainWaffle()
    {
        // Override and implement this function in SVG
    }
    virtual void moveIceScoopsToLeft()
    {
        // Override and implement this function in SVG
    }
    virtual void moveIceScoopsToRight()
    {
        // Override and implement this function in SVG
    }
    virtual void resetTickCounter()
    {
        // Override and implement this function in SVG
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image backgroundImage;
    touchgfx::Button backButton;
    MCULoadPercentage_SVG mcuLoadPercentageContainer;
    FrameRate_SVG frameRateContainer;
    touchgfx::MoveAnimator< touchgfx::SVGImage > mainWaffle;
    touchgfx::Button leftButton;
    touchgfx::Button rightButton;
    WaffleMenuContainer waffleMenu;
    touchgfx::ScrollWheel iceScoopScrollWheel;
    touchgfx::DrawableListItems<IceScoopItemContainer_SVG, 5> iceScoopScrollWheelListItems;

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<SVGViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;
    touchgfx::Callback < SVGViewBase, const touchgfx::MoveAnimator<touchgfx::SVGImage>& > hideTheMainWaffleEndedCallback;
    touchgfx::Callback<SVGViewBase> waffleMenuNewWaffleIsChosenCallback;
    touchgfx::Callback<SVGViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<SVGViewBase> waffleMenuSlideMenuChangedStateCallback;

    /*
     * Callback Handler Declarations
     */
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);
    void hideTheMainWaffleEndedCallbackHandler(const touchgfx::MoveAnimator<touchgfx::SVGImage>& comp);
    void waffleMenuNewWaffleIsChosenCallbackHandler();
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void waffleMenuSlideMenuChangedStateCallbackHandler();

};

#endif // SVGVIEWBASE_HPP

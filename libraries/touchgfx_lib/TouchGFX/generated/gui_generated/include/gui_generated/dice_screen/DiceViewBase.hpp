/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef DICEVIEWBASE_HPP
#define DICEVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/dice_screen/DicePresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <gui/containers/cubeLeftRightButtonsContainer.hpp>
#include <gui/containers/cubeUpDownButtonsContainer.hpp>
#include <gui/containers/animationsDepthButton.hpp>
#include <gui/containers/scaleSliderContainer.hpp>
#include <gui/containers/SimpleDiceContainer.hpp>
#include <gui/containers/TopBarContainer.hpp>
#include <gui/containers/AdvanceDiceContainer.hpp>

class DiceViewBase : public touchgfx::View<DicePresenter>
{
public:
    DiceViewBase();
    virtual ~DiceViewBase();
    virtual void setupScreen();

    /*
     * Custom Actions
     */
    virtual void scaleSliderChanged(int value)
    {
        // Override and implement this function in Screen1
    }
    
    virtual void animationComplexityChanged(bool value)
    {
        // Override and implement this function in Screen1
    }
    
    virtual void leftPressed()
    {
        // Override and implement this function in Screen1
    }
    
    virtual void rightPressed()
    {
        // Override and implement this function in Screen1
    }
    
    virtual void upPressed()
    {
        // Override and implement this function in Screen1
    }
    
    virtual void downPressed()
    {
        // Override and implement this function in Screen1
    }
    
    virtual void exitCubeAnimationEnded()
    {
        // Override and implement this function in Screen1
    }
    
    virtual void enterCubeAnimationEnded()
    {
        // Override and implement this function in Screen1
    }
    
    virtual void animationDone()
    {
        // Override and implement this function in Screen1
    }
    
    virtual void chromArtButtonPressed(bool value)
    {
        // Override and implement this function in Screen1
    }
    

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image background;
    cubeLeftRightButtonsContainer cubeLeftRightButtons;
    cubeUpDownButtonsContainer cubeUpDownButtons;
    animationsDepthButton animations;
    scaleSliderContainer scaleSlider;
    SimpleDiceContainer simpleDice;
    TopBarContainer topBar;
    AdvanceDiceContainer advanceDice;

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<DiceViewBase, int> scaleSliderNewScaleValueCallback;
    touchgfx::Callback<DiceViewBase, bool> animationsAnimationButtonPressedCallback;
    touchgfx::Callback<DiceViewBase> cubeLeftRightButtonsLeftPressedCallback;
    touchgfx::Callback<DiceViewBase> cubeLeftRightButtonsRightPressedCallback;
    touchgfx::Callback<DiceViewBase> cubeUpDownButtonsUpPressedCallback;
    touchgfx::Callback<DiceViewBase> cubeUpDownButtonsDownPressedCallback;
    touchgfx::Callback<DiceViewBase> advanceDiceExitAnimationEndedCallback;
    touchgfx::Callback<DiceViewBase> advanceDiceEnterAnimationEndedCallback;
    touchgfx::Callback<DiceViewBase> advanceDiceAnimationDoneCallback;
    touchgfx::Callback<DiceViewBase> simpleDiceAnimationDoneCallback;
    touchgfx::Callback<DiceViewBase, bool> topBarChromArtPressedCallback;

    /*
     * Callback Handler Declarations
     */
    void scaleSliderNewScaleValueCallbackHandler(int value);
    void animationsAnimationButtonPressedCallbackHandler(bool value);
    void cubeLeftRightButtonsLeftPressedCallbackHandler();
    void cubeLeftRightButtonsRightPressedCallbackHandler();
    void cubeUpDownButtonsUpPressedCallbackHandler();
    void cubeUpDownButtonsDownPressedCallbackHandler();
    void advanceDiceExitAnimationEndedCallbackHandler();
    void advanceDiceEnterAnimationEndedCallbackHandler();
    void advanceDiceAnimationDoneCallbackHandler();
    void simpleDiceAnimationDoneCallbackHandler();
    void topBarChromArtPressedCallbackHandler(bool value);

};

#endif // DICEVIEWBASE_HPP

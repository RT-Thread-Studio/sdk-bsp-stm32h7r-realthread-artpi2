/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TOPBARCONTAINERBASE_HPP
#define TOPBARCONTAINERBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>

class TopBarContainerBase : public touchgfx::Container
{
public:
    TopBarContainerBase();
    virtual ~TopBarContainerBase();
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setChromArtPressedCallback(touchgfx::GenericCallback<bool>& callback)
    {
        this->chromArtPressedCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitChromArtPressedCallback(bool value)
    {
        if (chromArtPressedCallback && chromArtPressedCallback->isValid())
        {
            this->chromArtPressedCallback->execute( value);
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Image background;
    touchgfx::TextArea mcuTitle;
    touchgfx::TextAreaWithOneWildcard mcuValue;
    touchgfx::TextArea fpsTite;
    touchgfx::TextAreaWithOneWildcard fpsValue;
    touchgfx::Image infoIcon;
    touchgfx::ToggleButton chromArtButton;

    /*
     * Wildcard Buffers
     */
    static const uint16_t MCUVALUE_SIZE = 4;
    touchgfx::Unicode::UnicodeChar mcuValueBuffer[MCUVALUE_SIZE];
    static const uint16_t FPSVALUE_SIZE = 3;
    touchgfx::Unicode::UnicodeChar fpsValueBuffer[FPSVALUE_SIZE];

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<bool>* chromArtPressedCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<TopBarContainerBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // TOPBARCONTAINERBASE_HPP

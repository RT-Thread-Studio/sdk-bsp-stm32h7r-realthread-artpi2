/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screentransitions_screen/ScreenTransitionsViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

ScreenTransitionsViewBase::ScreenTransitionsViewBase() :
    buttonCallback(this, &ScreenTransitionsViewBase::buttonCallbackHandler),
    bottombarGetTransitionInfoCallback(this, &ScreenTransitionsViewBase::bottombarGetTransitionInfoCallbackHandler),
    bottombarScrollWheelPressedCallback(this, &ScreenTransitionsViewBase::bottombarScrollWheelPressedCallbackHandler),
    bottombarScrollWheelAnimationEndedCallback(this, &ScreenTransitionsViewBase::bottombarScrollWheelAnimationEndedCallbackHandler),
    slideMenuStateChangedCallback(this, &ScreenTransitionsViewBase::slideMenuStateChangedCallbackHandler),
    topbarChromARTStateChangedTriggerCallback(this, &ScreenTransitionsViewBase::topbarChromARTStateChangedTriggerCallbackHandler),
    bottombarAnimaitonSpeedPressedCallback(this, &ScreenTransitionsViewBase::bottombarAnimaitonSpeedPressedCallbackHandler),
    flexButtonCallback(this, &ScreenTransitionsViewBase::flexButtonCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    backgroundBox.setPosition(0, 10, 800, 470);
    backgroundBox.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(backgroundBox);

    background.setXY(0, 50);
    background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_DAY_FULL_ID));
    add(background);

    transitionMenu.setXY(0, 330);
    transitionMenu.setup(touchgfx::SlideMenu::NORTH,
        touchgfx::Bitmap(BITMAP_EMPTYBOTTOMBARBG_ID),
        0, 0);
    transitionMenu.setState(touchgfx::SlideMenu::EXPANDED);
    transitionMenu.setVisiblePixelsWhenCollapsed(50);
    transitionMenu.setHiddenPixelsWhenExpanded(0);
    transitionMenu.setAnimationEasingEquation(touchgfx::EasingEquations::cubicEaseInOut);
    transitionMenu.setAnimationDuration(18);
    transitionMenu.setExpandedStateTimeout(180);
    transitionMenu.setStateChangedCallback(slideMenuStateChangedCallback);
    bottomBarButton.setBoxWithBorderPosition(0, 0, 0, 0);
    bottomBarButton.setBorderSize(5);
    bottomBarButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    bottomBarButton.setAction(flexButtonCallback);
    bottomBarButton.setPosition(326, 0, 148, 60);
    transitionMenu.add(bottomBarButton);

    bottombar.setXY(0, 0);
    bottombar.setGetTransitionInfoCallback(bottombarGetTransitionInfoCallback);
    bottombar.setScrollWheelPressedCallback(bottombarScrollWheelPressedCallback);
    bottombar.setScrollWheelAnimationEndedCallback(bottombarScrollWheelAnimationEndedCallback);
    bottombar.setAnimaitonSpeedPressedCallback(bottombarAnimaitonSpeedPressedCallback);
    transitionMenu.add(bottombar);

    add(transitionMenu);

    topbar.setXY(0, 0);
    topbar.setChromARTStateChangedTriggerCallback(topbarChromARTStateChangedTriggerCallback);
    add(topbar);

    selectedTransitionText.setPosition(200, 267, 400, 48);
    selectedTransitionText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    selectedTransitionText.setLinespacing(0);
    selectedTransitionText.setTypedText(touchgfx::TypedText(T_LARGECOVERTRANSITION));
    add(selectedTransitionText);

    startTransitionButton.setXY(345, 155);
    startTransitionButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICON_PLAY_DARK_ID), touchgfx::Bitmap(BITMAP_ICON_PLAY_DARK_ID));
    startTransitionButton.setAction(buttonCallback);
    add(startTransitionButton);

    backButton.setXY(12, 0);
    backButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_CHEVRON_LEFT_55_55_E9F5E9_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_CHEVRON_LEFT_55_55_96A395_SVG_ID));
    backButton.setAction(buttonCallback);
    add(backButton);
}

ScreenTransitionsViewBase::~ScreenTransitionsViewBase()
{

}

void ScreenTransitionsViewBase::setupScreen()
{
    bottombar.initialize();
    topbar.initialize();
}

void ScreenTransitionsViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &startTransitionButton)
    {
        //startTransitionPressedInteraction
        //When startTransitionButton clicked call startTransitionPressed on ScreenTransitions
        //Call startTransitionPressed
        startTransitionPressed();
    }
    if (&src == &backButton)
    {
        //ChangeScreenToMain
        //When backButton clicked change screen to MenuLauncherScreen
        //Go to MenuLauncherScreen with screen transition towards West
        application().gotoMenuLauncherScreenScreenWipeTransitionWest();
    }
}

void ScreenTransitionsViewBase::bottombarGetTransitionInfoCallbackHandler(TransitionInfo* value)
{
    //GetTransitionInfoInteraction
    //When bottombar getTransitionInfo call getTransitionInfo on ScreenTransitions
    //Call getTransitionInfo
    getTransitionInfo(value);
}

void ScreenTransitionsViewBase::bottombarScrollWheelPressedCallbackHandler()
{
    //ScrollWheelPressedInteraction
    //When bottombar scrollWheelPressed call scrollWheelPressed on ScreenTransitions
    //Call scrollWheelPressed
    scrollWheelPressed();
}

void ScreenTransitionsViewBase::bottombarScrollWheelAnimationEndedCallbackHandler()
{
    //ScrollWheelAnimationEndedInteraction
    //When bottombar scrollWheelAnimationEnded call scrollWheelAnimationEnded on ScreenTransitions
    //Call scrollWheelAnimationEnded
    scrollWheelAnimationEnded();
}

void ScreenTransitionsViewBase::slideMenuStateChangedCallbackHandler(const touchgfx::SlideMenu& src)
{
    if (&src == &transitionMenu)
    {
        //SliderMenueStateChangedInteraction1
        //When transitionMenu state changed call animateArrow on bottombar
        //Call animateArrow
        bottombar.animateArrow(transitionMenu.getState());
        //SliderMenueStateChangedInteraction2
        //When transitionMenu state changed call sliderMenuStateChanged on ScreenTransitions
        //Call sliderMenuStateChanged
        sliderMenuStateChanged(transitionMenu.getState());
    }
}

void ScreenTransitionsViewBase::topbarChromARTStateChangedTriggerCallbackHandler(bool value)
{
    //TopbarChromARTPressed
    //When topbar chromARTStateChangedTrigger call ChromARTPressed on ScreenTransitions
    //Call ChromARTPressed
    ChromARTPressed(value);
}

void ScreenTransitionsViewBase::bottombarAnimaitonSpeedPressedCallbackHandler(bool value)
{
    //AnimationSpeeedButtonInteraction
    //When bottombar animaitonSpeedPressed call animationSpeedButtonPressed on ScreenTransitions
    //Call animationSpeedButtonPressed
    animationSpeedButtonPressed(value);
}

void ScreenTransitionsViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &bottomBarButton)
    {
        //bottomBarButtonClicked
        //When bottomBarButton clicked call virtual function
        //Call bottomBarButtonClicked
        bottomBarButtonClicked();
    }
}

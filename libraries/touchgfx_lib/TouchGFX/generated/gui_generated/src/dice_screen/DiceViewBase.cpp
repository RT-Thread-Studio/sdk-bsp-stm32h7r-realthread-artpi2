/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/dice_screen/DiceViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

DiceViewBase::DiceViewBase() :
    scaleSliderNewScaleValueCallback(this, &DiceViewBase::scaleSliderNewScaleValueCallbackHandler),
    animationsAnimationButtonPressedCallback(this, &DiceViewBase::animationsAnimationButtonPressedCallbackHandler),
    cubeLeftRightButtonsLeftPressedCallback(this, &DiceViewBase::cubeLeftRightButtonsLeftPressedCallbackHandler),
    cubeLeftRightButtonsRightPressedCallback(this, &DiceViewBase::cubeLeftRightButtonsRightPressedCallbackHandler),
    cubeUpDownButtonsUpPressedCallback(this, &DiceViewBase::cubeUpDownButtonsUpPressedCallbackHandler),
    cubeUpDownButtonsDownPressedCallback(this, &DiceViewBase::cubeUpDownButtonsDownPressedCallbackHandler),
    advanceDiceExitAnimationEndedCallback(this, &DiceViewBase::advanceDiceExitAnimationEndedCallbackHandler),
    advanceDiceEnterAnimationEndedCallback(this, &DiceViewBase::advanceDiceEnterAnimationEndedCallbackHandler),
    advanceDiceAnimationDoneCallback(this, &DiceViewBase::advanceDiceAnimationDoneCallbackHandler),
    simpleDiceAnimationDoneCallback(this, &DiceViewBase::simpleDiceAnimationDoneCallbackHandler),
    topBarChromArtPressedCallback(this, &DiceViewBase::topBarChromArtPressedCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_WITH_SPARKLES_ID));
    add(background);

    cubeLeftRightButtons.setXY(89, 189);
    cubeLeftRightButtons.setLeftPressedCallback(cubeLeftRightButtonsLeftPressedCallback);
    cubeLeftRightButtons.setRightPressedCallback(cubeLeftRightButtonsRightPressedCallback);
    add(cubeLeftRightButtons);

    cubeUpDownButtons.setXY(322, 50);
    cubeUpDownButtons.setUpPressedCallback(cubeUpDownButtonsUpPressedCallback);
    cubeUpDownButtons.setDownPressedCallback(cubeUpDownButtonsDownPressedCallback);
    add(cubeUpDownButtons);

    animations.setXY(685, 135);
    animations.setAnimationButtonPressedCallback(animationsAnimationButtonPressedCallback);
    add(animations);

    scaleSlider.setXY(35, 80);
    scaleSlider.setNewScaleValueCallback(scaleSliderNewScaleValueCallback);
    add(scaleSlider);

    simpleDice.setXY(0, 0);
    simpleDice.setAnimationDoneCallback(simpleDiceAnimationDoneCallback);
    add(simpleDice);

    topBar.setXY(0, 0);
    topBar.setChromArtPressedCallback(topBarChromArtPressedCallback);
    add(topBar);

    advanceDice.setXY(0, 0);
    advanceDice.setVisible(false);
    advanceDice.setExitAnimationEndedCallback(advanceDiceExitAnimationEndedCallback);
    advanceDice.setEnterAnimationEndedCallback(advanceDiceEnterAnimationEndedCallback);
    advanceDice.setAnimationDoneCallback(advanceDiceAnimationDoneCallback);
    add(advanceDice);
}

DiceViewBase::~DiceViewBase()
{

}

void DiceViewBase::setupScreen()
{
    cubeLeftRightButtons.initialize();
    cubeUpDownButtons.initialize();
    animations.initialize();
    scaleSlider.initialize();
    simpleDice.initialize();
    topBar.initialize();
    advanceDice.initialize();
}

void DiceViewBase::scaleSliderNewScaleValueCallbackHandler(int value)
{
    //ScaleSliderChanged
    //When scaleSlider newScaleValue call scaleSliderChanged on Dice
    //Call scaleSliderChanged
    scaleSliderChanged(value);
}

void DiceViewBase::animationsAnimationButtonPressedCallbackHandler(bool value)
{
    //AnimationComplexityChanged
    //When animations animationButtonPressed call animationComplexityChanged on Dice
    //Call animationComplexityChanged
    animationComplexityChanged(value);
}

void DiceViewBase::cubeLeftRightButtonsLeftPressedCallbackHandler()
{
    //LeftPressed
    //When cubeLeftRightButtons leftPressed call leftPressed on Dice
    //Call leftPressed
    leftPressed();
}

void DiceViewBase::cubeLeftRightButtonsRightPressedCallbackHandler()
{
    //RightPressed
    //When cubeLeftRightButtons rightPressed call rightPressed on Dice
    //Call rightPressed
    rightPressed();
}

void DiceViewBase::cubeUpDownButtonsUpPressedCallbackHandler()
{
    //UpPressed
    //When cubeUpDownButtons upPressed call upPressed on Dice
    //Call upPressed
    upPressed();
}

void DiceViewBase::cubeUpDownButtonsDownPressedCallbackHandler()
{
    //DownPressed
    //When cubeUpDownButtons downPressed call downPressed on Dice
    //Call downPressed
    downPressed();
}

void DiceViewBase::advanceDiceExitAnimationEndedCallbackHandler()
{
    //ExitCubeAnimationEnded
    //When advanceDice exitAnimationEnded call exitCubeAnimationEnded on Dice
    //Call exitCubeAnimationEnded
    exitCubeAnimationEnded();
}

void DiceViewBase::advanceDiceEnterAnimationEndedCallbackHandler()
{
    //EnterCubeAnimationEnded
    //When advanceDice enterAnimationEnded call enterCubeAnimationEnded on Dice
    //Call enterCubeAnimationEnded
    enterCubeAnimationEnded();
}

void DiceViewBase::advanceDiceAnimationDoneCallbackHandler()
{
    //AdvanceAnimationDone
    //When advanceDice animationDone call animationDone on Dice
    //Call animationDone
    animationDone();
}

void DiceViewBase::simpleDiceAnimationDoneCallbackHandler()
{
    //SimpleAnimationDone
    //When simpleDice animationDone call animationDone on Dice
    //Call animationDone
    animationDone();
}

void DiceViewBase::topBarChromArtPressedCallbackHandler(bool value)
{
    //ChromARTButtonPressed
    //When topBar chromArtPressed call chromArtButtonPressed on Dice
    //Call chromArtButtonPressed
    chromArtButtonPressed(value);
}

/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/compassscreen_screen/CompassScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

CompassScreenViewBase::CompassScreenViewBase() :
    buttonCallback(this, &CompassScreenViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_COMPASS_BACKGROUND_800_480_ID));
    add(background);

    wheel.setXY(252, 30);
    wheel.setBitmap(touchgfx::Bitmap(BITMAP_COMPASS_DISC_ID));
    wheel.setWidth(420);
    wheel.setHeight(420);
    wheel.setBitmapPosition(0.0f, 0.0f);
    wheel.setScale(1.0f);
    wheel.setCameraDistance(1000.0f);
    wheel.setOrigo(210.0f, 210.0f, 1000.0f);
    wheel.setCamera(210.0f, 210.0f);
    wheel.setAngles(0.0f, 0.0f, 0.0f);
    wheel.setRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(wheel);

    angleVerbose.setPosition(30, 275, 175, 60);
    angleVerbose.setColor(touchgfx::Color::getColorFromRGB(0, 221, 246));
    angleVerbose.setLinespacing(0);
    Unicode::snprintf(angleVerboseBuffer, ANGLEVERBOSE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_VVZP).getText());
    angleVerbose.setWildcard(angleVerboseBuffer);
    angleVerbose.setTypedText(touchgfx::TypedText(T_ROTATIONLABEL));
    add(angleVerbose);

    angleNumeric.setXY(24, 135);
    angleNumeric.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    angleNumeric.setLinespacing(0);
    Unicode::snprintf(angleNumericBuffer, ANGLENUMERIC_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_MUJS).getText());
    angleNumeric.setWildcard(angleNumericBuffer);
    angleNumeric.resizeToCurrentText();
    angleNumeric.setTypedText(touchgfx::TypedText(T_ROTATIONDEGREECOMPASS));
    add(angleNumeric);

    compassCenter.setXY(391, 169);
    compassCenter.setBitmap(touchgfx::Bitmap(BITMAP_ELLIPSE_ID));
    add(compassCenter);

    backButton.setXY(0, 0);
    backButton.setBitmaps(touchgfx::Bitmap(BITMAP_BACK_BUTTON_NORMAL_ID), touchgfx::Bitmap(BITMAP_BACK_BUTTON_PRESSED_ID));
    backButton.setAction(buttonCallback);
    add(backButton);

    mcuLoadLabelText.setPosition(684, 25, 100, 35);
    mcuLoadLabelText.setColor(touchgfx::Color::getColorFromRGB(137, 154, 254));
    mcuLoadLabelText.setLinespacing(0);
    mcuLoadLabelText.setTypedText(touchgfx::TypedText(T_MCULABELTEXT_COMPASS));
    add(mcuLoadLabelText);

    fpsLabelText.setPosition(740, 367, 35, 35);
    fpsLabelText.setColor(touchgfx::Color::getColorFromRGB(137, 154, 254));
    fpsLabelText.setLinespacing(0);
    fpsLabelText.setTypedText(touchgfx::TypedText(T_FPSLABELTEXT_COMPASS));
    add(fpsLabelText);

    frameRate.setXY(708, 402);
    add(frameRate);

    mcuLoadPercentage.setXY(699, 60);
    add(mcuLoadPercentage);
}

CompassScreenViewBase::~CompassScreenViewBase()
{

}

void CompassScreenViewBase::setupScreen()
{
    frameRate.initialize();
    mcuLoadPercentage.initialize();
}

void CompassScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &backButton)
    {
        //ChangeScreenToMain
        //When backButton clicked change screen to MenuLauncherScreen
        //Go to MenuLauncherScreen with screen transition towards West
        application().gotoMenuLauncherScreenScreenWipeTransitionWest();
    }
}
